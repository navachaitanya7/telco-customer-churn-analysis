# -*- coding: utf-8 -*-
"""Customer Churn Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PS38vl36Ly3oNoZZULHkz-WxoAaiu2hK
"""

# Customer Churn Analysis
# This script analyzes the Telco Customer Churn dataset to identify factors contributing to churn.
# It uses Pandas for data manipulation, Matplotlib/Seaborn for visualization, and Scikit-learn for modeling.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import json

# ==================== Step 1: Data Loading & Preprocessing ====================
print("Step 1: Loading and preprocessing data...")

# Load the Telco Customer Churn dataset from the specified file path
# Make sure the file 'Telco-Customer-Churn.csv' is in a 'data' folder inside the project directory.
try:
    df = pd.read_csv('data/Telco-Customer-Churn.csv')
except FileNotFoundError:
    print("Error: 'Telco-Customer-Churn.csv' not found. Please place the dataset in the 'data' folder.")
    exit()

# Data cleaning and handling missing values
# TotalCharges is initially an object type due to some spaces; convert to numeric.
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df.dropna(inplace=True)

# Feature Engineering
df['TenureMonths'] = df['tenure']
df['IsSeniorCitizen'] = df['SeniorCitizen'].replace({1: 'Yes', 0: 'No'})
df['HasPartnerAndDependents'] = df.apply(lambda row: 'Yes' if row['Partner'] == 'Yes' and row['Dependents'] == 'Yes' else 'No', axis=1)

# Convert categorical features to numerical using one-hot encoding
categorical_features = ['gender', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines', 'InternetService',
                        'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',
                        'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod', 'IsSeniorCitizen',
                        'HasPartnerAndDependents']
df_encoded = pd.get_dummies(df, columns=categorical_features, drop_first=True)
df_encoded['Churn'] = df_encoded['Churn'].map({'Yes': 1, 'No': 0})

# ==================== Step 2: Exploratory Data Analysis (EDA) ====================
print("Step 2: Performing Exploratory Data Analysis (EDA)...")
plt.style.use('seaborn-v0_8-whitegrid')
fig, axes = plt.subplots(1, 2, figsize=(14, 6))

# Churn Distribution
sns.countplot(x='Churn', data=df, ax=axes[0])
axes[0].set_title('Distribution of Customer Churn')
axes[0].set_xticklabels(['No Churn', 'Churn'])

# Churn by Contract Type
sns.countplot(x='Contract', hue='Churn', data=df, ax=axes[1])
axes[1].set_title('Churn Rate by Contract Type')
plt.tight_layout()
plt.show()

# ==================== Step 3: Predictive Modeling ====================
print("Step 3: Building a predictive model...")

# Select features and target variable
features = df_encoded.drop(columns=['customerID', 'tenure', 'SeniorCitizen', 'Churn', 'TenureMonths']).columns
target = 'Churn'
X = df_encoded[features]
y = df_encoded[target]

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a RandomForestClassifier model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions and evaluate the model
y_pred = model.predict(X_test)
print("\nModel Evaluation:")
print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Get feature importances to understand what drives churn
feature_importances = pd.Series(model.feature_importances_, index=features).sort_values(ascending=False)
print("\nTop 5 Most Important Features for Churn:")
print(feature_importances.head(5))

# ==================== Step 4: Final Output and Recommendations ====================
print("\nStep 4: Generating business insights...")

# Display key findings from the analysis
findings = {
    "key_findings": [
        "Customers with a 'Month-to-month' contract have a significantly higher churn rate.",
        "Monthly and total charges are the most important predictors of churn.",
        "Customers who do not use 'OnlineSecurity' and 'TechSupport' services are more likely to churn."
    ],
    "recommendations": [
        "Develop a retention strategy targeting 'Month-to-month' contract customers with special offers for longer-term plans.",
        "Analyze the pricing of 'OnlineSecurity' and 'TechSupport' to increase adoption and improve customer stickiness.",
        "Implement a predictive model to proactively identify high-risk customers for targeted outreach."
    ]
}

print(json.dumps(findings, indent=4))